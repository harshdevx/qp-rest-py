import re
from pydantic import BaseModel, field_validator, Field
from typing import Optional

from sqlalchemy import desc


class UserFields(BaseModel):
    user_uuid: str = Field(
        default=None,
        description="this field only accepts uuidv4 string")

    @field_validator('user_uuid')
    def match_user_uuid(cls, v):
        matched = re.match(
            "^[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}\Z", v)
        if not (bool(matched)):
            raise ValueError("this field only accepts uuidv4")
        return v

    email_hash: str = Field(
        description="this field only accepts email hash"
    )

    def match_email_hash(cls, v):
        matched = re.match("\b[0-9a-f]{5,40}\b")
        if not (bool(matched)):
            raise ValueError("this field accepts email hash")
        return v

    primary_mobile_number: str = Field(
        default=None,
        description="this field accepts phone number in format +11112221234"
    )

    def match_phone_number(cls, v):
        matched = re.match("")
        if not (bool(matched)):
            raise ValueError(
                "this field accepts mobile number in format +11112221234")
        return v

    email_id: str = Field(
        description="this field only accepts email@domain.com format")

    @field_validator('email_id')
    def validate_email_id(cls, v):
        matched = re.match(
            "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$", v)
        if not (bool(matched)):
            raise ValueError(
                "this field can only accept values = email@domain")
        return v


class SearchUser(BaseModel):
    user_uuid: str = Field(
        default=None,
        description="this field only accepts uuidv4 string")

    @field_validator('user_uuid')
    def match_user_uuid(cls, v):
        matched = re.match(
            "^[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}\Z", v)
        if not (bool(matched)):
            raise ValueError("this field only accepts uuidv4")
        return v

    criteria: str = Field(
        description="this field can only accept values = google, firebase, apple or standard")

    @field_validator('criteria')
    def match_criteria(cls, v):
        matched = re.match("[google|firebase|apple|standard]", v)
        if not (bool(matched)):
            raise ValueError(
                "this field can only accept values = google, firebase, apple or standard")
        return v


class CreateUser(BaseModel):
    id_token: str = Field(
        description="this field only accepts id token string")
    request_code: str = Field(
        description="insert the request code that you received from token end point len=40")
    full_name: str = Field(
        description="this field only accepts characters,len=2-31")
    gender: str = Field(
        description="this field only accepts character M or F, len=1")
    primary_email_id: Optional[str] = Field(
        description="this field only accepts email@domain.com format")
    primary_mobile_number: Optional[str] = Field(
        description="this field only accepts phone numbers, len=8,15")
    domain_uuid: str = Field(
        description="this field only accepts uuidv4 string")
    device_token: str = Field(
        description="this field accepts device token generated by mobile app")
    signin_method: str = Field(
        description="this field can only accept values = google, firebase, apple or standard")

    @field_validator('request_code')
    def match_request_code(cls, v):
        matched = re.match("[0-9a-fA-Z]{40}", v)
        if not (bool(matched)):
            raise ValueError("this field only accepts sha1 hashes")
        return v

    @field_validator('full_name')
    def match_full_name(cls, v):
        matched = re.match(
            "([a-zA-Z\u00C0-\u1FFF\u2C00-\uD7FF\w',.-]+( [a-zA-Z\u00C0-\u1FFF\u2C00-\uD7FF\w',.-]+)*){2,31}", v)
        if not (bool(matched)):
            raise ValueError("this field accepts characters only")
        return v

    @field_validator('gender')
    def match_gender(cls, v):
        matched = re.match("[MF]{1}", v)
        if not (bool(matched)):
            raise ValueError("this field accepts M or F character only")
        return v

    @field_validator('primary_email_id')
    def match_primary_email_id(cls, v):
        matched = re.match(
            "([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+", v)
        if not (bool(matched)):
            raise ValueError("this field only email in user@domain.com format")
        return v

    @field_validator('primary_mobile_number')
    def match_primary_mobile_number(cls, v):
        matched = re.match("[0-9]{8,15}", v)
        if not (bool(matched)):
            raise ValueError("this field only accepts numbers")
        return v

    @field_validator('domain_uuid')
    def match_domain_uuid(cls, v):
        matched = re.match(
            "^[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}\Z", v)
        if not (bool(matched)):
            raise ValueError("this field only accepts uuidv4")
        return v

    @field_validator('signin_method')
    def match_criteria(cls, v):
        matched = re.match("[google|firebase|apple|standard]", v)
        if not (bool(matched)):
            raise ValueError(
                "this field can only accept values = google, firebase, apple or standard")
        return v
